TODO: Background task to resolve bookmark icons/titles

Convert urls to youtube playlist (max 50)
-> YouTube Playlist From Links

Copy links in selection (select area snipping tool)
- Toggle

If on page, show next or previous (if in bookmarks) as well as random in favorites

https://apps.dominiczelek.com/youtube-playlist-from-links/


// Add to your state declarations
const [isSelectingLinks, setIsSelectingLinks] = useState(false);

// Add this function to handle link selection
const selectLinksFromPage = async () => {
  setIsSelectingLinks(true);
  
  // Get current active tab
  const [activeTab] = await chrome.tabs.query({ active: true, currentWindow: true });
  
  if (!activeTab?.id) {
    setBookmarkSuccess("Error: No active tab found");
    setIsSelectingLinks(false);
    return;
  }
  
  // Inject content script to capture selection
  try {
    await chrome.scripting.executeScript({
      target: { tabId: activeTab.id },
      function: captureLinksFromSelection
    });
    
    // Listen for message from content script
    chrome.runtime.onMessage.addListener(function handleLinks(message) {
      if (message.type === 'captured-links') {
        // Process the links
        const links = message.links;
        if (links.length === 0) {
          setBookmarkSuccess("No links found in selection");
        } else {
          // Convert to the format used by your app
          const parsedLinks = links.map(link => ({
            title: link.text || new URL(link.href).hostname,
            url: link.href
          }));
          
          setParsedUrls(parsedLinks);
          setShowFolderSelector(true);
        }
        
        // Clean up
        chrome.runtime.onMessage.removeListener(handleLinks);
        setIsSelectingLinks(false);
      }
      return true;
    });
    
  } catch (error) {
    console.error("Error injecting script:", error);
    setBookmarkSuccess(`Error: ${error.message}`);
    setIsSelectingLinks(false);
  }
};

// This function will be injected into the tab
function captureLinksFromSelection() {
  // Create selection UI
  const overlay = document.createElement('div');
  overlay.style.position = 'fixed';
  overlay.style.top = '0';
  overlay.style.left = '0';
  overlay.style.width = '100%';
  overlay.style.height = '100%';
  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.3)';
  overlay.style.zIndex = '999999';
  overlay.style.cursor = 'crosshair';
  
  const instructions = document.createElement('div');
  instructions.textContent = 'Click and drag to select a region containing links';
  instructions.style.position = 'fixed';
  instructions.style.top = '10px';
  instructions.style.left = '50%';
  instructions.style.transform = 'translateX(-50%)';
  instructions.style.backgroundColor = 'white';
  instructions.style.color = 'black';
  instructions.style.padding = '10px';
  instructions.style.borderRadius = '5px';
  instructions.style.zIndex = '9999999';
  
  document.body.appendChild(overlay);
  document.body.appendChild(instructions);
  
  let startX, startY;
  let selectionRect = null;
  
  overlay.addEventListener('mousedown', function(e) {
    startX = e.clientX;
    startY = e.clientY;
    
    if (selectionRect) {
      selectionRect.remove();
    }
    
    selectionRect = document.createElement('div');
    selectionRect.style.position = 'fixed';
    selectionRect.style.border = '2px dashed #3498db';
    selectionRect.style.backgroundColor = 'rgba(52, 152, 219, 0.2)';
    selectionRect.style.zIndex = '9999998';
    document.body.appendChild(selectionRect);
  });
  
  overlay.addEventListener('mousemove', function(e) {
    if (startX !== undefined && startY !== undefined && selectionRect) {
      const x = Math.min(startX, e.clientX);
      const y = Math.min(startY, e.clientY);
      const width = Math.abs(e.clientX - startX);
      const height = Math.abs(e.clientY - startY);
      
      selectionRect.style.left = x + 'px';
      selectionRect.style.top = y + 'px';
      selectionRect.style.width = width + 'px';
      selectionRect.style.height = height + 'px';
    }
  });
  
  overlay.addEventListener('mouseup', function(e) {
    if (startX === undefined || startY === undefined) return;
    
    // Get coordinates relative to viewport
    const x = Math.min(startX, e.clientX);
    const y = Math.min(startY, e.clientY);
    const width = Math.abs(e.clientX - startX);
    const height = Math.abs(e.clientY - startY);
    
    // Find all links within the selection rectangle
    const links = [];
    document.querySelectorAll('a').forEach(link => {
      const rect = link.getBoundingClientRect();
      const linkCenterX = rect.left + rect.width / 2;
      const linkCenterY = rect.top + rect.height / 2;
      
      if (
        linkCenterX >= x && 
        linkCenterX <= x + width && 
        linkCenterY >= y && 
        linkCenterY <= y + height
      ) {
        links.push({
          href: link.href,
          text: link.textContent?.trim() || ''
        });
      }
    });
    
    // Clean up
    overlay.remove();
    instructions.remove();
    if (selectionRect) selectionRect.remove();
    
    // Send links back to extension
    chrome.runtime.sendMessage({ 
      type: 'captured-links', 
      links: links
    });
  });
}

// Add this button to your UI
<button 
  onClick={selectLinksFromPage}
  className="px-2 py-1 bg-blue-600/50 hover:bg-blue-700/50 active:bg-blue-800/50 dark:bg-blue-500/50 dark:hover:bg-blue-600/50 dark:active:bg-blue-700/50 text-gray-800 dark:text-white rounded font-bold cursor-pointer transition-colors border border-transparent dark:border-slate-200 flex items-center gap-2"
  disabled={isSelectingLinks}
>
  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="flex-shrink-0">
    <path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4M10 17l5-5-5-5M13 12H3"/>
  </svg>
  {isSelectingLinks ? 'Selecting...' : 'Select links on page'}
</button>